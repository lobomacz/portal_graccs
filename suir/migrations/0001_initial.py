# Generated by Django 3.2.7 on 2022-08-22 22:47

import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Anuncio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=45, verbose_name='Título')),
                ('imagen', models.ImageField(upload_to='suir/anuncios/img/', verbose_name='Imágen')),
                ('url', models.URLField(max_length=150, verbose_name='URL del sitio')),
                ('activo', models.BooleanField()),
            ],
            options={
                'ordering': ['activo', 'titulo'],
            },
        ),
        migrations.CreateModel(
            name='Carrusel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('imagen', models.ImageField(upload_to='suir/carrusel/img/')),
                ('titulo', models.CharField(max_length=25)),
                ('descripcion', models.CharField(max_length=250)),
                ('activo', models.BooleanField()),
            ],
            options={
                'ordering': ['activo', 'titulo'],
            },
        ),
        migrations.CreateModel(
            name='Comunidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150)),
                ('location', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
            ],
            options={
                'verbose_name_plural': 'Comunidades',
                'ordering': ['municipio', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='DetalleTabla',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('elemento', models.CharField(max_length=45)),
                ('codigo_eq', models.CharField(blank=True, max_length=15, null=True, verbose_name='Código de equivalencia')),
            ],
            options={
                'ordering': ['tabla', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Entidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('nombre', models.CharField(max_length=45)),
                ('nivel', models.CharField(choices=[('S', 'SECRETARÍA'), ('D', 'DIRECCIÓN'), ('C', 'COMISIÓN'), ('O', 'OFICINA')], max_length=45)),
                ('enlace', models.BooleanField(verbose_name='Es Enlace')),
                ('sector', models.ForeignKey(help_text='Sector social que atiende la entidad.', limit_choices_to=models.Q(('tabla__tabla', 'sectores')), on_delete=django.db.models.deletion.RESTRICT, to='suir.detalletabla')),
            ],
            options={
                'verbose_name_plural': 'Entidades',
            },
        ),
        migrations.CreateModel(
            name='Indicador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('titulo', models.CharField(max_length=150, verbose_name='Título')),
                ('descripcion', models.CharField(max_length=250)),
                ('formula', models.CharField(help_text='Fórmula con la que se calcula el valor del indicador.', max_length=50, verbose_name='Fórmula de Cálculo')),
                ('metrica', models.CharField(choices=[('Cre', 'Creciente'), ('Dec', 'Decreciente')], help_text='Métrica con que se analizan los valores del indicador.', max_length=25, verbose_name='Métrica de Valoración')),
                ('portada', models.ImageField(null=True, upload_to='suir/indicadores/img/', verbose_name='Portada')),
                ('ficha', models.FileField(blank=True, help_text='Documento en Formato PDF', null=True, upload_to='suir/indicadores/docs/', verbose_name='Ficha Técnica')),
                ('tags', models.TextField(blank=True, null=True)),
                ('fuente', models.CharField(help_text='Fuente donde se obtienen los datos/valores del indicador.', max_length=150, verbose_name='Fuente de datos')),
                ('marco', models.CharField(help_text='Marco legal que respalda el seguimiento del indicador.', max_length=150, verbose_name='Marco legal')),
                ('version', models.PositiveSmallIntegerField()),
                ('activo', models.BooleanField()),
                ('seguimiento', models.BooleanField(help_text='El indicador está siendo monitoreado y se recogen datos del mismo.', verbose_name='En seguimiento')),
            ],
            options={
                'verbose_name_plural': 'Indicadores',
                'ordering': ['-seguimiento', 'sector', 'titulo'],
            },
        ),
        migrations.CreateModel(
            name='LinkExterno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('texto', models.CharField(help_text='Texto del enlace', max_length=15)),
                ('url', models.URLField(help_text='URL al que apunta el enlace', max_length=150)),
                ('descripcion', models.CharField(blank=True, help_text='Descripción del enlace', max_length=50, null=True)),
                ('activo', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Enlace externo',
                'verbose_name_plural': 'Enlaces externos',
                'ordering': ['-activo'],
            },
        ),
        migrations.CreateModel(
            name='LinkRed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('red', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('youtube', 'YouTube')], max_length=25)),
                ('url', models.URLField(help_text='URL de la red social.', max_length=150)),
                ('activo', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'LinkRedes',
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('nombre_corto', models.CharField(max_length=10)),
                ('region', models.CharField(choices=[('racs', 'Región Autónoma del Caribe Sur'), ('racn', 'Región Autónoma del Caribe Norte')], default='racs', max_length=5)),
                ('area', models.FloatField(help_text='Extensión en Km2', null=True, verbose_name='Área (Km2)')),
                ('poblacion', models.IntegerField(null=True, verbose_name='Población aprox.')),
                ('mpoly', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Tabla',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('tabla', models.CharField(max_length=25)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValorIndicador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('fecha', models.DateField(auto_now_add=True, verbose_name='Fecha')),
                ('fecha_inicio', models.DateField(verbose_name='Inicio de la captación')),
                ('fecha_final', models.DateField(verbose_name='Final de la captación')),
                ('recolector', models.CharField(max_length=50, verbose_name='Recolector de datos')),
                ('codigo_ficha', models.CharField(blank=True, max_length=50, null=True, verbose_name='Código de ficha')),
                ('ficha', models.FileField(blank=True, help_text='Ficha en formato PDF', null=True, upload_to='suir/indicadores/fichas/')),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino')], help_text='Si aplica al tipo de valor del indicador.', max_length=1, null=True, verbose_name='Sexo')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Valor')),
                ('comunidad', models.ForeignKey(default=1, help_text='Comunidad donde se levantó el dato.', on_delete=django.db.models.deletion.RESTRICT, to='suir.comunidad')),
                ('digitador', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='valores_digitadores', related_query_name='valor_digitador', to=settings.AUTH_USER_MODEL)),
                ('entidad', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='suir.entidad')),
                ('estado', models.ForeignKey(help_text='Posibles valores: borrador, pendiente, publicado', on_delete=django.db.models.deletion.RESTRICT, related_name='valores_estados', related_query_name='valor_estado', to='suir.detalletabla')),
                ('etnia', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='valores_etnias', related_query_name='valor_etnia', to='suir.detalletabla')),
                ('indicador', models.ForeignKey(limit_choices_to={'activo': True, 'seguimiento': True}, on_delete=django.db.models.deletion.CASCADE, to='suir.indicador')),
                ('rango_edad', models.ForeignKey(help_text='Rango de edad (si aplica).', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='valores_rangos_edad', related_query_name='valor_rango_edad', to='suir.detalletabla')),
                ('supervisor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='valores_supervisores', related_query_name='valor_supervisor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Valor',
                'verbose_name_plural': 'Valores',
                'ordering': ['indicador', '-fecha'],
            },
        ),
        migrations.CreateModel(
            name='Transmision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('descripcion', models.CharField(help_text='Campo empleado para la interfaz administrativa.', max_length=200, verbose_name='Descripción')),
                ('inicio', models.DateTimeField(auto_now_add=True, verbose_name='Hora de Inicio')),
                ('final', models.DateTimeField(blank=True, null=True, verbose_name='Hora de Culminación')),
                ('codigo', models.TextField(blank=True, help_text='Código Embed/Insertar </> de la transmisión.', null=True, validators=[django.core.validators.RegexValidator(message='El campo debe contener el código <embed>.', regex='<iframe')], verbose_name='Código </>')),
                ('origen', models.CharField(choices=[('yt', 'YouTube'), ('fb', 'Facebook')], default='yt', max_length=2)),
                ('especial', models.BooleanField(default=False, help_text='Seleccionar en caso que la transmisión no corresponda al noticiero RBS.', verbose_name='Transmisión Especial')),
                ('publicador', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transmisión',
                'verbose_name_plural': 'Transmisiones',
                'ordering': ['inicio'],
                'get_latest_by': 'inicio',
            },
        ),
        migrations.CreateModel(
            name='Publicacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('titulo', models.CharField(max_length=250, verbose_name='Título')),
                ('slug', models.SlugField(max_length=150)),
                ('fecha', models.DateField()),
                ('portada', models.ImageField(upload_to='suir/publicaciones/img/')),
                ('contenido', ckeditor_uploader.fields.RichTextUploadingField()),
                ('documento', models.FileField(blank=True, null=True, upload_to='suir/publicaciones/docs/')),
                ('tags', models.TextField(blank=True, help_text='Etiquetas separadas por coma.', null=True, verbose_name='Etiquetas')),
                ('carrusel', models.BooleanField(default=False, verbose_name='Promovido al carrusel')),
                ('publicado', models.DateField(blank=True, help_text='Fecha de publicación', null=True, verbose_name='Fecha publicado')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('estado', models.ForeignKey(help_text='Posibles valores: borrador, pendiente, publicado', on_delete=django.db.models.deletion.RESTRICT, related_name='publicaciones_estados', related_query_name='publicacion_estado', to='suir.detalletabla')),
                ('tipo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publicaciones_tipos', related_query_name='publicacion_tipo', to='suir.detalletabla')),
            ],
            options={
                'verbose_name': 'Publicación',
                'verbose_name_plural': 'Publicaciones',
                'ordering': ['tipo', 'estado', '-fecha', 'autor'],
                'permissions': [('crear_noticia', 'Redacta Noticias'), ('crear_informe', 'Redacta Informes'), ('publicar_noticia', 'Publica Noticias'), ('publicar_informe', 'Publica Informes')],
            },
        ),
        migrations.CreateModel(
            name='Institucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150)),
                ('siglas', models.CharField(max_length=15)),
                ('url', models.URLField(blank=True, max_length=100, null=True)),
                ('sector', models.ForeignKey(help_text='Sector social que atiende la institución', limit_choices_to=models.Q(('tabla__tabla', 'sectores')), on_delete=django.db.models.deletion.RESTRICT, related_name='instituciones_sectores', related_query_name='institucion_sector', to='suir.detalletabla')),
            ],
            options={
                'verbose_name': 'Institución',
                'verbose_name_plural': 'Instituciones',
                'ordering': ['nombre'],
            },
        ),
        migrations.AddField(
            model_name='indicador',
            name='colaboradores',
            field=models.ManyToManyField(help_text='Instituciones colaboradoras en la recolección de datos para el indicador.', to='suir.Institucion'),
        ),
        migrations.AddField(
            model_name='indicador',
            name='creador',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='indicadores_creadores', related_query_name='indicador_creador', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='indicador',
            name='desagregaciones',
            field=models.ManyToManyField(help_text='Desagregaciones del indicador', limit_choices_to=models.Q(('tabla__tabla', 'desagregaciones')), related_name='_suir_indicador_desagregaciones_+', to='suir.DetalleTabla'),
        ),
        migrations.AddField(
            model_name='indicador',
            name='entidad',
            field=models.ForeignKey(help_text='Entidad responsable del seguimiento del indicador.', on_delete=django.db.models.deletion.RESTRICT, to='suir.entidad'),
        ),
        migrations.AddField(
            model_name='indicador',
            name='estado',
            field=models.ForeignKey(help_text='Posibles valores: borrador, pendiente, publicado', limit_choices_to=models.Q(('tabla__tabla', 'estados_pub')), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='indicadores_estados', related_query_name='indicador_estado', to='suir.detalletabla'),
        ),
        migrations.AddField(
            model_name='indicador',
            name='periodicidad',
            field=models.ForeignKey(limit_choices_to=models.Q(('tabla__tabla', 'periodos')), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='indicadores_periodos', related_query_name='indicador_periodo', to='suir.detalletabla'),
        ),
        migrations.AddField(
            model_name='indicador',
            name='responsable',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='indicadores_responsables', related_query_name='indicador_responsable', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='indicador',
            name='sector',
            field=models.ForeignKey(help_text='Sector social al que pertenece el indicador.', limit_choices_to=models.Q(('tabla__tabla', 'sectores')), on_delete=django.db.models.deletion.RESTRICT, related_name='indicadores_sectores', related_query_name='indicador_sector', to='suir.detalletabla'),
        ),
        migrations.AddField(
            model_name='indicador',
            name='tipo_valor',
            field=models.ForeignKey(help_text='Tipo de valor del indicador.', limit_choices_to=models.Q(('tabla__tabla', 'tipos_valor')), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='indicadores_tipos_valores', related_query_name='indicador_tipo_valor', to='suir.detalletabla'),
        ),
        migrations.AddField(
            model_name='detalletabla',
            name='tabla',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suir.tabla'),
        ),
        migrations.CreateModel(
            name='Contacto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('nombre', models.CharField(max_length=50)),
                ('apellido', models.CharField(max_length=50)),
                ('movil', models.CharField(help_text='Formato 8888-8888', max_length=9, validators=[django.core.validators.RegexValidator(message='El valor no es un número telefónico válido.', regex='[0-9]{4}-[0-9]{4}')], verbose_name='Móvil')),
                ('correo', models.EmailField(max_length=254, verbose_name='Correo electrónico')),
                ('cargo', models.ForeignKey(limit_choices_to=models.Q(('tabla__tabla', 'cargos')), null=True, on_delete=django.db.models.deletion.SET_NULL, to='suir.detalletabla')),
                ('institucion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suir.institucion')),
            ],
            options={
                'ordering': ['institucion', 'apellido'],
            },
        ),
        migrations.AddField(
            model_name='comunidad',
            name='actividades_ec',
            field=models.ManyToManyField(help_text='Actividades económicas desarrolladas en la comunidad.', limit_choices_to=models.Q(('tabla__tabla', 'actividades_ec')), related_name='_suir_comunidad_actividades_ec_+', to='suir.DetalleTabla'),
        ),
        migrations.AddField(
            model_name='comunidad',
            name='municipio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='suir.municipio'),
        ),
    ]
